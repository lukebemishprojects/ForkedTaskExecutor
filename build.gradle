plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'dev.lukebemish.managedversioning'
}

group = 'dev.lukebemish'

managedVersioning {
    versionFile.set file('version.properties')
    versionPRs()
    versionSnapshots()
}

managedVersioning.apply()

managedVersioning {
    gitHubActions {
        release {
            prettyName = 'Release'
            workflowDispatch = true
            gradleJob {
                name.set 'build'
                buildCache()
                setupGitUser()
                readOnly = false
                gradlew 'Tag Release', 'tagRelease'
                gradlew 'Build', 'build'
                push()
                recordVersion 'Record Version', 'version'
                dependencySubmission()
            }
            gradleJob {
                name.set 'publishCentral'
                buildCache()
                needs.add('build')
                gradlew 'Publish Central', 'publish', 'closeAndReleaseSonatypeStagingRepository'
                tag.set('${{needs.build.outputs.version}}')
                sign()
                mavenCentral()
                mavenStaging('github')
            }
        }
        snapshot {
            prettyName.set 'Snapshot'
            workflowDispatch.set(true)
            onBranches.add 'main'
            gradleJob {
                name.set 'build'
                buildCache()
                cacheReadOnly = false
                gradlew 'Build', 'build'
                gradlew 'Publish', 'publish'
                mavenSnapshot('github')
            }
        }
        build_pr {
            prettyName.set 'Build PR'
            pullRequest.set(true)
            gradleJob {
                name.set 'build'
                gradlew 'Build', 'build'
                gradlew 'Publish', 'publish'
                pullRequestArtifact()
            }
        }
        publish_pr {
            prettyName.set 'Publish PR'
            publishPullRequestAction(
                'github',
                "dev/lukebemish/forkedtaskexecutor",
                'Build PR'
            )
        }
    }
}

managedVersioning.publishing.mavenCentral()
managedVersioning.publishing.mavenSnapshot(publishing)
managedVersioning.publishing.mavenStaging(publishing)
managedVersioning.publishing.mavenPullRequest(publishing)

sourceSets {
    runner {}
    runner21 {}
}

java {
    withSourcesJar()
    withJavadocJar()
    registerFeature('runner') {
        usingSourceSet(sourceSets.runner)
        withSourcesJar()
        withJavadocJar()
    }
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

compileRunner21Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

runnerJar {
    into('META-INF/versions/21') {
        from sourceSets.runner21.output
    }

    manifest.attributes(
        'Multi-Release': 'true',
        'Main-Class': 'dev.lukebemish.forkedtaskexecutor.runner.Main'
    )
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(project(':')) {
        capabilities {
            requireFeature('runner')
        }
    }
    testImplementation("org.junit.jupiter:junit-jupiter:5.11.4")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

testing {
    suites {
        def action = { suite ->
            tasks.named(suite.sources.compileJavaTaskName) {
                source sourceSets.test.java
            }
            tasks.named(suite.sources.processResourcesTaskName) {
                from sourceSets.test.resources
            }
            configurations {
                create("${suite.name}DaemonClasspath")
            }
            dependencies {
                "${suite.name}DaemonClasspath"(project(':')) {
                    capabilities {
                        requireFeature('runner')
                    }
                }
                "${suite.name}DaemonClasspath"(suite.sources.output)
            }
            suite.useJUnitJupiter()
            suite.dependencies {
                implementation(project())
                implementation(project()) {
                    capabilities {
                        requireFeature('runner')
                    }
                }
                implementation("org.junit.jupiter:junit-jupiter:5.11.4")
                runtimeOnly("org.junit.platform:junit-platform-launcher")
            }
            suite.targets.configureEach {
                testTask.configure {
                    systemProperty 'forkedtaskexecutor.test.daemonclasspath', configurations."${suite.name}DaemonClasspath".asPath
                    testLogging.showStandardStreams = true
                }
            }
        }

        def forVersion = { suite, version ->
            suite.targets.configureEach {
                testTask.configure {
                    javaLauncher = javaToolchains.launcherFor {
                        languageVersion = JavaLanguageVersion.of(version)
                    }
                }
            }
            tasks.named(suite.sources.compileJavaTaskName) {
                javaCompiler = javaToolchains.compilerFor {
                    languageVersion = JavaLanguageVersion.of(version)
                }
            }
        }

        test17(JvmTestSuite) {
            action.call(it)
            forVersion.call(it, 17)
        }

        test21(JvmTestSuite) {
            action.call(it)
            forVersion.call(it, 21)
        }
    }
}

test {
    enabled = false
}

tasks.named('check') {
    dependsOn tasks.test17
    dependsOn tasks.test21
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            managedVersioning.publishing.sign(signing, it)
            managedVersioning.publishing.pom(it, github_repo, license)
            pom {
                name = 'ForkedTaskExecotur'
                description = 'A tool for running tasks and obtaining results from a daemon on another JVM.'
            }
        }
    }
}
